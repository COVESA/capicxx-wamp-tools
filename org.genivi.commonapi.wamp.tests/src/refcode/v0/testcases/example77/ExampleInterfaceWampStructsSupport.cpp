/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.wamp (standalone).
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/

#include "v0/testcases/example77/ExampleInterfaceWampStructsSupport.hpp"

namespace v0 {
namespace testcases {
namespace example77 {

Summands_internal transformSummands(const ExampleInterface::Summands &inst)
{
	return inst.values_;
}

ExampleInterface::Summands transformSummands(const Summands_internal &inst_internal)
{
	// TODO: Check if it is ok to return a struct on the stack. 
	ExampleInterface::Summands inst;
	inst.values_ = inst_internal;
	return inst;
}

Params_internal transformParams(const ExampleInterface::Params &inst)
{
	return Params_internal(
		transformSummands(inst.getSs()),
		inst.getX()
	);
}

ExampleInterface::Params transformParams(const Params_internal &inst_internal)
{
	return ExampleInterface::Params(
		transformSummands(std::get<0>(inst_internal)),
		std::get<1>(inst_internal)
	);
}

SumDiff_internal transformSumDiff(const ExampleInterface::SumDiff &inst)
{
	return inst.values_;
}

ExampleInterface::SumDiff transformSumDiff(const SumDiff_internal &inst_internal)
{
	// TODO: Check if it is ok to return a struct on the stack. 
	ExampleInterface::SumDiff inst;
	inst.values_ = inst_internal;
	return inst;
}


} // namespace example77
} // namespace testcases
} // namespace v0
