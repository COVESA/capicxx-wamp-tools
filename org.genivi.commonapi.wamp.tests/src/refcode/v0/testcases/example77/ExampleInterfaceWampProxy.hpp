/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.wamp (standalone).
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_TESTCASES_EXAMPLE77_Example_Interface_WAMP_PROXY_HPP_
#define V0_TESTCASES_EXAMPLE77_Example_Interface_WAMP_PROXY_HPP_

#include <v0/testcases/example77/ExampleInterfaceProxyBase.hpp>
#include "v0/testcases/example77/ExampleInterfaceWampDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Wamp/WampAddress.hpp>
#include <CommonAPI/Wamp/WampFactory.hpp>
#include <CommonAPI/Wamp/WampProxy.hpp>
#include <CommonAPI/Wamp/WampAddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v0 {
namespace testcases {
namespace example77 {

class ExampleInterfaceWampProxy
    : virtual public ExampleInterfaceProxyBase,
      virtual public CommonAPI::Wamp::WampProxy {
public:
    ExampleInterfaceWampProxy(
        const CommonAPI::Wamp::WampAddress &_address,
        const std::shared_ptr<CommonAPI::Wamp::WampProxyConnection> &_connection);

    virtual ~ExampleInterfaceWampProxy() { }



    virtual void play(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> playAsync(PlayAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void add2(const int64_t &_left, const int64_t &_right, CommonAPI::CallStatus &_internalCallStatus, int64_t &_sum, int64_t &_diff, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> add2Async(const int64_t &_left, const int64_t &_right, Add2AsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void add2struct(const ExampleInterface::Summands &_s, CommonAPI::CallStatus &_internalCallStatus, ExampleInterface::SumDiff &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> add2structAsync(const ExampleInterface::Summands &_s, Add2structAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void add2nestedStruct(const ExampleInterface::Params &_p, CommonAPI::CallStatus &_internalCallStatus, ExampleInterface::SumDiff &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> add2nestedStructAsync(const ExampleInterface::Params &_p, Add2nestedStructAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:



};

} // namespace example77
} // namespace testcases
} // namespace v0

#endif // V0_TESTCASES_EXAMPLE77_Example_Interface_WAMP_PROXY_HPP_

