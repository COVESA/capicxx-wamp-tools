/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.wamp (standalone).
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_TESTCASES_EXAMPLE36_Example_Interface_WAMP_STUB_ADAPTER_HPP_
#define V0_TESTCASES_EXAMPLE36_Example_Interface_WAMP_STUB_ADAPTER_HPP_

#include "v0/testcases/example36/ExampleInterfaceStub.hpp"
//#include "v0/testcases/example36/ExampleInterfaceWampDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Wamp/WampFactory.hpp>
#include <CommonAPI/Wamp/WampStubAdapterHelper.hpp>
#include <CommonAPI/Wamp/WampStubAdapter.hpp>
//#include <CommonAPI/Wamp/WampDeployment.hpp>

#include <CommonAPI/Wamp/WampConnection.hpp>
#include <CommonAPI/Wamp/WampClientId.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <autobahn/autobahn.hpp>

namespace v0 {
namespace testcases {
namespace example36 {

typedef CommonAPI::Wamp::WampStubAdapterHelper<ExampleInterfaceStub> ExampleInterfaceWampStubAdapterHelper;

class ExampleInterfaceWampStubAdapterInternal
	: public virtual ExampleInterfaceStubAdapter,
	  public ExampleInterfaceWampStubAdapterHelper
{
public:
	ExampleInterfaceWampStubAdapterInternal(
		const CommonAPI::Wamp::WampAddress &_address,
		const std::shared_ptr<CommonAPI::Wamp::WampProxyConnection> &_connection,
		const std::shared_ptr<CommonAPI::StubBase> &_stub);

	~ExampleInterfaceWampStubAdapterInternal();

	//////////////////////////////////////////////////////////////////////////////////////////

	virtual void provideRemoteMethods();


	void fireBroadcast1Selective(const std::shared_ptr<CommonAPI::ClientId> _client, const int32_t &_arg1);
	void sendBroadcast1Selective(const int32_t &_arg1, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
	void subscribeForbroadcast1Selective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success);
	void unsubscribeFrombroadcast1Selective(const std::shared_ptr<CommonAPI::ClientId> clientId);
	std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForBroadcast1Selective();


	//////////////////////////////////////////////////////////////////////////////////////////

	const ExampleInterfaceWampStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
	const CommonAPI::Wamp::StubAttributeTable& getStubAttributeTable();

	void deactivateManagedInstances();

	static CommonAPI::Wamp::WampGetAttributeStubDispatcher<
		::v0::testcases::example36::ExampleInterfaceStub,
		CommonAPI::Version
	> getExampleInterfaceInterfaceVersionStubDispatcher;

private:
	ExampleInterfaceWampStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
	CommonAPI::Wamp::StubAttributeTable stubAttributeTable_;
	std::mutex Broadcast1SelectiveEventMutex_;
	//bool Broadcast1SelectiveEventHandler(CommonAPI::Wamp::client_id_t _client, bool subscribe);
};

void ExampleInterfaceWampStubAdapterInternal::fireBroadcast1Selective(const std::shared_ptr<CommonAPI::ClientId> _client, const int32_t &_arg1) {
	// TODO
}

void ExampleInterfaceWampStubAdapterInternal::sendBroadcast1Selective(const int32_t &_arg1, const std::shared_ptr<CommonAPI::ClientIdList> _receivers) {
	// TODO
}

void ExampleInterfaceWampStubAdapterInternal::subscribeForbroadcast1Selective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) {
	// TODO
}

void ExampleInterfaceWampStubAdapterInternal::unsubscribeFrombroadcast1Selective(const std::shared_ptr<CommonAPI::ClientId> clientId) {
	// TODO
}

std::shared_ptr<CommonAPI::ClientIdList> const ExampleInterfaceWampStubAdapterInternal::getSubscribersForBroadcast1Selective() {
	std::lock_guard<std::mutex> itsLock(Broadcast1SelectiveEventMutex_);
	return std::make_shared<CommonAPI::ClientIdList>(*subscribersForBroadcast1Selective_);
}


class ExampleInterfaceWampStubAdapter
	: public ExampleInterfaceWampStubAdapterInternal,
	  public std::enable_shared_from_this<ExampleInterfaceWampStubAdapter> {
public:
	ExampleInterfaceWampStubAdapter(const CommonAPI::Wamp::WampAddress &_address,
											const std::shared_ptr<CommonAPI::Wamp::WampProxyConnection> &_connection,
											const std::shared_ptr<CommonAPI::StubBase> &_stub) 
		: CommonAPI::Wamp::WampStubAdapter(_address, _connection, false),
		  ExampleInterfaceWampStubAdapterInternal(_address, _connection, _stub) {
		std::cout << "ExampleInterfaceWampStubAdapter constructor called" << std::endl;
	}
};

} // namespace example36
} // namespace testcases
} // namespace v0

#endif // V0_TESTCASES_EXAMPLE36_Example_Interface_WAMP_STUB_ADAPTER_HPP_
