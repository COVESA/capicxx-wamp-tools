/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.wamp (standalone).
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <testcases/example77/ExampleInterfaceWampProxy.hpp>

namespace testcases {
namespace example77 {

std::shared_ptr<CommonAPI::Wamp::WampProxy> createExampleInterfaceWampProxy(
    const CommonAPI::Wamp::WampAddress &_address,
    const std::shared_ptr<CommonAPI::Wamp::WampProxyConnection> &_connection) {
    return std::make_shared< ExampleInterfaceWampProxy>(_address, _connection);
}

void initializeExampleInterfaceWampProxy() {
     CommonAPI::Wamp::Factory::get()->registerProxyCreateMethod(
        ExampleInterface::getInterface(),
        &createExampleInterfaceWampProxy);
}

INITIALIZER(registerExampleInterfaceWampProxy) {
    CommonAPI::Wamp::Factory::get()->registerInterface(initializeExampleInterfaceWampProxy);
}

ExampleInterfaceWampProxy::ExampleInterfaceWampProxy(
    const CommonAPI::Wamp::WampAddress &_address,
    const std::shared_ptr<CommonAPI::Wamp::WampProxyConnection> &_connection)
    :   CommonAPI::Wamp::WampProxy(_address, _connection)
{
}



    void ExampleInterfaceWampProxy::play(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Wamp::WampProxyHelper<
            CommonAPI::Wamp::WampSerializableArguments<
            >,
            CommonAPI::Wamp::WampSerializableArguments<
            >
            >::callMethodWithReply(
        *this,
        "play",
        "",
(_info ? _info : &CommonAPI::Wamp::defaultCallInfo),
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> ExampleInterfaceWampProxy::playAsync(PlayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        return CommonAPI::Wamp::WampProxyHelper<
            CommonAPI::Wamp::WampSerializableArguments<
            >,
            CommonAPI::Wamp::WampSerializableArguments<
            >
            >::callMethodAsync(
        *this,
        "play",
        "",
        (_info ? _info : &CommonAPI::Wamp::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
            if (_callback)
                _callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    void ExampleInterfaceWampProxy::add2(const int64_t &_left, const int64_t &_right, CommonAPI::CallStatus &_internalCallStatus, int64_t &_sum, int64_t &_diff, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int64_t, CommonAPI::EmptyDeployment> deploy_left(_left, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::Deployable< int64_t, CommonAPI::EmptyDeployment> deploy_right(_right, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::Deployable< int64_t, CommonAPI::EmptyDeployment> deploy_sum(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::Deployable< int64_t, CommonAPI::EmptyDeployment> deploy_diff(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::Wamp::WampProxyHelper<
            CommonAPI::Wamp::WampSerializableArguments<
            CommonAPI::Deployable< int64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable< int64_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::Wamp::WampSerializableArguments<
            CommonAPI::Deployable< int64_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable< int64_t,CommonAPI::EmptyDeployment>
            >
            >::callMethodWithReply(
        *this,
        "add2",
        "xx",
(_info ? _info : &CommonAPI::Wamp::defaultCallInfo),
deploy_left, deploy_right,
_internalCallStatus,
deploy_sum, deploy_diff);
_sum = deploy_sum.getValue();
_diff = deploy_diff.getValue();
}
    std::future<CommonAPI::CallStatus> ExampleInterfaceWampProxy::add2Async(const int64_t &_left, const int64_t &_right, Add2AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int64_t, CommonAPI::EmptyDeployment> deploy_left(_left, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::Deployable< int64_t, CommonAPI::EmptyDeployment> deploy_right(_right, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::Deployable< int64_t, CommonAPI::EmptyDeployment> deploy_sum(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::Deployable< int64_t, CommonAPI::EmptyDeployment> deploy_diff(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        return CommonAPI::Wamp::WampProxyHelper<
            CommonAPI::Wamp::WampSerializableArguments<
            CommonAPI::Deployable< int64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable< int64_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::Wamp::WampSerializableArguments<
            CommonAPI::Deployable< int64_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable< int64_t,CommonAPI::EmptyDeployment>
            >
            >::callMethodAsync(
        *this,
        "add2",
        "xx",
        (_info ? _info : &CommonAPI::Wamp::defaultCallInfo),
        deploy_left, deploy_right,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int64_t, CommonAPI::EmptyDeployment > _sum, CommonAPI::Deployable< int64_t, CommonAPI::EmptyDeployment > _diff) {
            if (_callback)
                _callback(_internalCallStatus, _sum.getValue(), _diff.getValue());
        },
        std::make_tuple(deploy_sum, deploy_diff));
    }
    void ExampleInterfaceWampProxy::add2struct(const ExampleInterface::Summands &_s, CommonAPI::CallStatus &_internalCallStatus, ExampleInterface::SumDiff &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< ExampleInterface::Summands, ::testcases::example77::ExampleInterface_::SummandsDeployment_t> deploy_s(_s, static_cast< ::testcases::example77::ExampleInterface_::SummandsDeployment_t* >(nullptr));
        CommonAPI::Deployable< ExampleInterface::SumDiff, ::testcases::example77::ExampleInterface_::SumDiffDeployment_t> deploy_result(static_cast< ::testcases::example77::ExampleInterface_::SumDiffDeployment_t* >(nullptr));
        CommonAPI::Wamp::WampProxyHelper<
            CommonAPI::Wamp::WampSerializableArguments<
            CommonAPI::Deployable< ExampleInterface::Summands, ::testcases::example77::ExampleInterface_::SummandsDeployment_t >
            >,
            CommonAPI::Wamp::WampSerializableArguments<
            CommonAPI::Deployable< ExampleInterface::SumDiff,::testcases::example77::ExampleInterface_::SumDiffDeployment_t>
            >
            >::callMethodWithReply(
        *this,
        "add2struct",
        "(tt)",
(_info ? _info : &CommonAPI::Wamp::defaultCallInfo),
deploy_s,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> ExampleInterfaceWampProxy::add2structAsync(const ExampleInterface::Summands &_s, Add2structAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< ExampleInterface::Summands, ::testcases::example77::ExampleInterface_::SummandsDeployment_t> deploy_s(_s, static_cast< ::testcases::example77::ExampleInterface_::SummandsDeployment_t* >(nullptr));
        CommonAPI::Deployable< ExampleInterface::SumDiff, ::testcases::example77::ExampleInterface_::SumDiffDeployment_t> deploy_result(static_cast< ::testcases::example77::ExampleInterface_::SumDiffDeployment_t* >(nullptr));
        return CommonAPI::Wamp::WampProxyHelper<
            CommonAPI::Wamp::WampSerializableArguments<
            CommonAPI::Deployable< ExampleInterface::Summands, ::testcases::example77::ExampleInterface_::SummandsDeployment_t >
            >,
            CommonAPI::Wamp::WampSerializableArguments<
            CommonAPI::Deployable< ExampleInterface::SumDiff,::testcases::example77::ExampleInterface_::SumDiffDeployment_t>
            >
            >::callMethodAsync(
        *this,
        "add2struct",
        "(tt)",
        (_info ? _info : &CommonAPI::Wamp::defaultCallInfo),
        deploy_s,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ExampleInterface::SumDiff, ::testcases::example77::ExampleInterface_::SumDiffDeployment_t > _result) {
            if (_callback)
                _callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    void ExampleInterfaceWampProxy::add2nestedStruct(const ExampleInterface::Params &_p, CommonAPI::CallStatus &_internalCallStatus, ExampleInterface::SumDiff &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< ExampleInterface::Params, ::testcases::example77::ExampleInterface_::ParamsDeployment_t> deploy_p(_p, static_cast< ::testcases::example77::ExampleInterface_::ParamsDeployment_t* >(nullptr));
        CommonAPI::Deployable< ExampleInterface::SumDiff, ::testcases::example77::ExampleInterface_::SumDiffDeployment_t> deploy_result(static_cast< ::testcases::example77::ExampleInterface_::SumDiffDeployment_t* >(nullptr));
        CommonAPI::Wamp::WampProxyHelper<
            CommonAPI::Wamp::WampSerializableArguments<
            CommonAPI::Deployable< ExampleInterface::Params, ::testcases::example77::ExampleInterface_::ParamsDeployment_t >
            >,
            CommonAPI::Wamp::WampSerializableArguments<
            CommonAPI::Deployable< ExampleInterface::SumDiff,::testcases::example77::ExampleInterface_::SumDiffDeployment_t>
            >
            >::callMethodWithReply(
        *this,
        "add2nestedStruct",
        "((tt)t)",
(_info ? _info : &CommonAPI::Wamp::defaultCallInfo),
deploy_p,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> ExampleInterfaceWampProxy::add2nestedStructAsync(const ExampleInterface::Params &_p, Add2nestedStructAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< ExampleInterface::Params, ::testcases::example77::ExampleInterface_::ParamsDeployment_t> deploy_p(_p, static_cast< ::testcases::example77::ExampleInterface_::ParamsDeployment_t* >(nullptr));
        CommonAPI::Deployable< ExampleInterface::SumDiff, ::testcases::example77::ExampleInterface_::SumDiffDeployment_t> deploy_result(static_cast< ::testcases::example77::ExampleInterface_::SumDiffDeployment_t* >(nullptr));
        return CommonAPI::Wamp::WampProxyHelper<
            CommonAPI::Wamp::WampSerializableArguments<
            CommonAPI::Deployable< ExampleInterface::Params, ::testcases::example77::ExampleInterface_::ParamsDeployment_t >
            >,
            CommonAPI::Wamp::WampSerializableArguments<
            CommonAPI::Deployable< ExampleInterface::SumDiff,::testcases::example77::ExampleInterface_::SumDiffDeployment_t>
            >
            >::callMethodAsync(
        *this,
        "add2nestedStruct",
        "((tt)t)",
        (_info ? _info : &CommonAPI::Wamp::defaultCallInfo),
        deploy_p,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ExampleInterface::SumDiff, ::testcases::example77::ExampleInterface_::SumDiffDeployment_t > _result) {
            if (_callback)
                _callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }


void ExampleInterfaceWampProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 0;
      }

      } // namespace example77
      } // namespace testcases

